<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ASE_Comp1</name>
    </assembly>
    <members>
        <member name="T:ASE_Comp1.Circle">
            <summary>
            creating circle class with the base of shape
            </summary>
        </member>
        <member name="F:ASE_Comp1.Circle.radius">
            <summary>
            variable of circle class
            </summary>
        </member>
        <member name="M:ASE_Comp1.Circle.#ctor">
            <summary>
            circle with base of shape
            </summary>
        </member>
        <member name="M:ASE_Comp1.Circle.draw(System.Drawing.Graphics)">
            <summary>
            overriding the shape's draw method
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:ASE_Comp1.Circle.set_properties(System.Drawing.Color,System.Drawing.Color,System.Boolean,System.Int32,System.Int32,System.Int32[])">
            <summary>
            overriding the shape's set_properties method
            </summary>
            <param name="pen_color"></param>
            <param name="c"></param>
            <param name="flag_fill"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="num"></param>
        </member>
        <member name="T:ASE_Comp1.CommandParser">
            <summary>
            This class contains all the methods to check and run commands
            </summary>
        </member>
        <member name="M:ASE_Comp1.CommandParser.#ctor(ASE_Comp1.Form1)">
            <summary>
            It is the parameterized constructor of commandparser
            </summary>
            <param name="f1"></param>
        </member>
        <member name="M:ASE_Comp1.CommandParser.#ctor">
            <summary>
            calling constructor 
            </summary>
        </member>
        <member name="F:ASE_Comp1.CommandParser.instance">
            <summary>
            setting command parser instance to null
            </summary>
        </member>
        <member name="P:ASE_Comp1.CommandParser.GetInstance">
            <summary>
            private constructor
            </summary>
        </member>
        <member name="M:ASE_Comp1.CommandParser.clear_list">
            <summary>
            clear error list, variables, method
            </summary>
        </member>
        <member name="M:ASE_Comp1.CommandParser.clear_error">
            <summary>
            clearing the errors
            </summary>
        </member>
        <member name="M:ASE_Comp1.CommandParser.run_command(System.String)">
            <summary>
            run command to run all the commands
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:ASE_Comp1.CommandParser.check_command_type(System.String)">
            <summary>
            method to check the command type
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:ASE_Comp1.CommandParser.check_variable(System.String)">
            <summary>
            method to check the variables
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:ASE_Comp1.CommandParser.check_variable_operation(System.String)">
            <summary>
            checking the variable of the operation
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:ASE_Comp1.CommandParser.check_if_command(System.String)">
            <summary>
            checking the if command
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:ASE_Comp1.CommandParser.getOperator">
            <summary>
            get if condition operator
            </summary>
            <returns>operator used in if command</returns>
        </member>
        <member name="M:ASE_Comp1.CommandParser.check_loop(System.String)">
            <summary>
            check loop command validity
            </summary>
            <param name="command">command to be checked</param>
            <returns>true if command is valid else false</returns>
        </member>
        <member name="M:ASE_Comp1.CommandParser.check_method(System.String)">
            <summary>
            checking the method
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:ASE_Comp1.CommandParser.check_methodcall(System.String)">
            <summary>
            check vadility of method call command
            checks if method exist or not
            </summary>
            <param name="command">method containing command</param>
            <returns>returns true if valid and false if invalid</returns>
        </member>
        <member name="M:ASE_Comp1.CommandParser.error_list">
            <summary>
            arraylist to return the errors
            </summary>
            <returns>errors</returns>
        </member>
        <member name="M:ASE_Comp1.CommandParser.Valid_execute_command(System.String)">
            <summary>
            to valid the executed commands
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="T:ASE_Comp1.IAbstractColl">
            <summary>
            interface abstract collection
            </summary>
        </member>
        <member name="M:ASE_Comp1.IAbstractColl.CreateIterator">
            <summary>
            creating iterator
            </summary>
            <returns></returns>
        </member>
        <member name="T:ASE_Comp1.IAbstractIterator">
            <summary>
            Interface for Iterator
            </summary>
        </member>
        <member name="M:ASE_Comp1.IAbstractIterator.First">
            <summary>
            Shape's first method
            </summary>
            <returns></returns>
        </member>
        <member name="M:ASE_Comp1.IAbstractIterator.Next">
            <summary>
            creating shape class with base interface
            </summary>
            <returns></returns>
        </member>
        <member name="P:ASE_Comp1.IAbstractIterator.IsDone">
            <summary>
            creating a boolen
            </summary>
        </member>
        <member name="P:ASE_Comp1.IAbstractIterator.CurrentItem">
            <summary>
            shape's method currentitem
            </summary>
        </member>
        <member name="T:ASE_Comp1.Iterator">
            <summary>
            creating iterator class having base interface IAbstractIterator
            </summary>
        </member>
        <member name="P:ASE_Comp1.Iterator.CurrentItem">
            <summary>
            method to use in IAbstractColl
            </summary>
        </member>
        <member name="M:ASE_Comp1.Iterator.First">
            <summary>
            method to use in IAbstractColl
            </summary>
            <returns></returns>
        </member>
        <member name="P:ASE_Comp1.Iterator.IsDone">
            <summary>
            method to use in IAbstractColl
            </summary>
        </member>
        <member name="M:ASE_Comp1.Iterator.Next">
            <summary>
            method to use in IAbstractColl
            </summary>
            <returns></returns>
        </member>
        <member name="P:ASE_Comp1.Iterator.Step">
            <summary>
            method step with datatype int
            </summary>
        </member>
        <member name="T:ASE_Comp1.Loop">
            <summary>
            creating class loop
            </summary>
        </member>
        <member name="P:ASE_Comp1.Loop.GetInstance">
            <summary>
            if instance is null then create a new object of class
            </summary>
        </member>
        <member name="M:ASE_Comp1.Loop.getMethodSig">
            <summary>
            Collection of key/pair i.e. name/parameter.count
            </summary>
            <returns>method signatures</returns>
        </member>
        <member name="M:ASE_Comp1.Loop.Clear_list">
            <summary>
            Clear methods, variables
            </summary>
        </member>
        <member name="M:ASE_Comp1.Loop.run_if_command(System.String,System.String[],System.Int32,ASE_Comp1.Form1)">
            <summary>
            execute if command
            </summary>
            <param name="Draw">if command line</param>
            <param name="lines">all commands entered by user</param>
            <param name="line_num">if command found line</param>
            <param name="fm">Object of Form1</param>
        </member>
        <member name="M:ASE_Comp1.Loop.run_loop_command(System.String,System.String[],System.Int32,ASE_Comp1.Form1)">
            <summary>
            method to run the loop command
            </summary>
            <param name="Draw"> it is the string to store data</param>
            <param name="lines">lines are the code's lines</param>
            <param name="loop_found_in_line"> it is the line where loop is found</param>
            <param name="fm"> it represents form1</param>
            <returns></returns>
        </member>
        <member name="M:ASE_Comp1.Loop.run_method_command(System.String,System.String[],System.Int32,ASE_Comp1.Form1)">
            <summary>
            execute method command
            </summary>
            <param name="Draw">method command line</param>
            <param name="lines">all commands entered by user</param>
            <param name="method_found">loop command found line</param>
            <param name="fm">Object of Form1</param>
        </member>
        <member name="M:ASE_Comp1.Loop.run_method_call(System.String,ASE_Comp1.Form1)">
            <summary>
            Execute method call command
            </summary>
            <param name="Draw">method call line</param>
            <param name="fm">Object of Form1</param>
        </member>
        <member name="M:ASE_Comp1.Loop.getVariables">
            <summary>
            To get the variables
            </summary>
            <returns>variables and their values</returns>
        </member>
        <member name="M:ASE_Comp1.Loop.run_variable_command(System.String)">
            <summary>
            method to run variable command
            </summary>
            <param name="Draw">method line command</param>
            <returns> bool </returns>
        </member>
        <member name="M:ASE_Comp1.Loop.runVariableOperation(System.String,ASE_Comp1.Form1)">
            <summary>
            method to run variable operation
            </summary>
            <param name="line">loop command found line</param>
            <param name="fm">object of form1</param>
            <returns> variable operators</returns>
        </member>
        <member name="T:ASE_Comp1.Polygon">
            <summary>
            creating class polygon with base shape
            </summary>
        </member>
        <member name="M:ASE_Comp1.Polygon.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:ASE_Comp1.Polygon.set_properties(System.Drawing.Color,System.Drawing.Color,System.Boolean,System.Int32,System.Int32,System.Int32[])">
            <summary>
            setting properties of rectangle overriding the shape's
            </summary>
            <param name="pen_color"></param>
            <param name="fill_color"></param>
            <param name="flag_fill"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="num"></param>
        </member>
        <member name="M:ASE_Comp1.Polygon.draw(System.Drawing.Graphics)">
            <summary>
            setting the draw method overriding the shape's
            </summary>
            <param name="g"></param>
        </member>
        <member name="T:ASE_Comp1.ShapesExceptions">
            <summary>
            shapes exception class to keep all the exceptions
            </summary>
        </member>
        <member name="T:ASE_Comp1.ShapesExceptions.ColorNotFound">
            <summary>
            class for color not found
            </summary>
        </member>
        <member name="M:ASE_Comp1.ShapesExceptions.ColorNotFound.#ctor(System.String)">
            <summary>
            color not found method
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:ASE_Comp1.ShapesExceptions.FillError">
            <summary>
            class for the fill error
            </summary>
        </member>
        <member name="M:ASE_Comp1.ShapesExceptions.FillError.#ctor(System.String)">
            <summary>
            fill error method
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:ASE_Comp1.ShapesExceptions.InvalidVariableNameException">
            <summary>
            variable not found exception
            </summary>
        </member>
        <member name="M:ASE_Comp1.ShapesExceptions.InvalidVariableNameException.#ctor(System.String)">
            <summary>
            invalid variable name exception 
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:ASE_Comp1.ShapesExceptions.InvalidCommandException">
            <summary>
            invalid command exception 
            </summary>
        </member>
        <member name="M:ASE_Comp1.ShapesExceptions.InvalidCommandException.#ctor(System.String)">
            <summary>
            invalid command exception 
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:ASE_Comp1.ShapesExceptions.InvalidParameterException">
            <summary>
            invalid parameter exception
            </summary>
        </member>
        <member name="M:ASE_Comp1.ShapesExceptions.InvalidParameterException.#ctor(System.String)">
            <summary>
            invalid parameter exception
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:ASE_Comp1.ShapesExceptions.VariableNotFoundException">
            <summary>
            variable not found exception
            </summary>
        </member>
        <member name="M:ASE_Comp1.ShapesExceptions.VariableNotFoundException.#ctor(System.String)">
            <summary>
            variable not found exception
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:ASE_Comp1.ShapesExceptions.InvalidMethodNameException">
            <summary>
            invalid method name
            </summary>
        </member>
        <member name="M:ASE_Comp1.ShapesExceptions.InvalidMethodNameException.#ctor(System.String)">
            <summary>
            invalid method name
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:ASE_Comp1.ShapesExceptions.MethodNotFoundException">
            <summary>
            method not found exception
            </summary>
        </member>
        <member name="M:ASE_Comp1.ShapesExceptions.MethodNotFoundException.#ctor(System.String)">
            <summary>
            method not found exception
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:ASE_Comp1.Factory">
            <summary>
            Factory class of the shape class
            </summary>
        </member>
        <member name="M:ASE_Comp1.Factory.GetShape(System.String)">
            <summary>
            Method checks either which shapes are included in the system
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:ASE_Comp1.Form1">
            <summary>
            creating form1 class with base class Form
            </summary>
        </member>
        <member name="F:ASE_Comp1.Form1.form">
            <summary>
            assigning form from form1
            </summary>
        </member>
        <member name="M:ASE_Comp1.Form1.#ctor">
            <summary>
            Initialize and define attributes
            </summary>
        </member>
        <member name="M:ASE_Comp1.Form1.panelOutput_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            Painting the Output Panel
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ASE_Comp1.Form1.drawing_command(System.String)">
            <summary>
            for drwaing the shapes or commands
            </summary>
            <param name="Draw"></param>
        </member>
        <member name="M:ASE_Comp1.Form1.RotateShape">
            <summary>
            method to rotate the shape
            </summary>
            <returns></returns>
        </member>
        <member name="F:ASE_Comp1.Form1.shape_list">
            <summary>
            store list of objects.
            </summary>
        </member>
        <member name="M:ASE_Comp1.Form1.SetDrawing(System.String,System.Drawing.Color,System.Drawing.Color,System.Boolean,System.Int32[])">
            <summary>
            method to set all the drawings
            </summary>
            <param name="Draw"></param>
            <param name="pen_color"></param>
            <param name="fill_color"></param>
            <param name="flag_fill"></param>
            <param name="num"></param>
        </member>
        <member name="M:ASE_Comp1.Form1.richTbAction_TextChanged(System.Object,System.EventArgs)">
            <summary>
            not used 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ASE_Comp1.Form1.loadToolStripMenuItem1_Click(System.Object,System.EventArgs)">
            <summary>
            Load the presaved commands 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ASE_Comp1.Form1.saveToolStripMenuItem1_Click(System.Object,System.EventArgs)">
            <summary>
            save the commands for furture references
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ASE_Comp1.Form1.helpToolStripMenuItem_Click(System.Object,System.EventArgs)">
            <summary>
            Menustrip to tell about the application
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ASE_Comp1.Form1.exitToolStripMenuItem_Click(System.Object,System.EventArgs)">
            <summary>
            exits out of the application
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ASE_Comp1.Form1.buttonSyntax_Click(System.Object,System.EventArgs)">
            <summary>
            checks the syntax
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ASE_Comp1.Form1.panelBG_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            to paint the background
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ASE_Comp1.Form1.richTbConsole_TextChanged(System.Object,System.EventArgs)">
            <summary>
            not used
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ASE_Comp1.Form1.instructionToolStripMenuItem_Click(System.Object,System.EventArgs)">
            <summary>
            for instruction
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ASE_Comp1.Form1.aboutUsToolStripMenuItem_Click(System.Object,System.EventArgs)">
            <summary>
            to know about us
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ASE_Comp1.Form1.richTbCommand_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            to check the command in richTbcommand
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ASE_Comp1.Form1.richTbConsole_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            richtbconsole keypress
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:ASE_Comp1.Form1.Count">
            <summary>
            count shape list
            </summary>
        </member>
        <member name="P:ASE_Comp1.Form1.Item(System.Int32)">
            <summary>
            to set and get shape
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="F:ASE_Comp1.Form1.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ASE_Comp1.Form1.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ASE_Comp1.Form1.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:ASE_Comp1.Form1.richTbConsole">
            <summary>
            making to public to use it in other classes
            </summary>
        </member>
        <member name="T:ASE_Comp1.InterfaceShape">
            <summary>
            creating base class InterfaceShape
            </summary>
        </member>
        <member name="M:ASE_Comp1.InterfaceShape.set_properties(System.Drawing.Color,System.Drawing.Color,System.Boolean,System.Int32,System.Int32,System.Int32[])">
            <summary>
            setting properties method
            </summary>
            <param name="c1"></param>
            <param name="cl"></param>
            <param name="flag_fill"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="num"></param>
        </member>
        <member name="M:ASE_Comp1.InterfaceShape.Set_base(System.Drawing.Color,System.Drawing.Color,System.Boolean,System.Int32[])">
            <summary>
            seting set base method
            </summary>
            <param name="c2"></param>
            <param name="cl"></param>
            <param name="flag_fill"></param>
            <param name="num"></param>
        </member>
        <member name="M:ASE_Comp1.InterfaceShape.draw(System.Drawing.Graphics)">
            <summary>
            method to draw shapes
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:ASE_Comp1.Program.Main">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="T:ASE_Comp1.Rectangle">
            <summary>
            creating rectangle class from the base class shape
            </summary>
        </member>
        <member name="M:ASE_Comp1.Rectangle.#ctor">
            <summary>
            rectangle with base shape
            </summary>
        </member>
        <member name="M:ASE_Comp1.Rectangle.set_properties(System.Drawing.Color,System.Drawing.Color,System.Boolean,System.Int32,System.Int32,System.Int32[])">
            <summary>
            setting properties of rectangle overriding the shape's
            </summary>
            <param name="pen_color"></param>
            <param name="fill_color"></param>
            <param name="flag_fill"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="num"></param>
        </member>
        <member name="M:ASE_Comp1.Rectangle.draw(System.Drawing.Graphics)">
            <summary>
            setting the draw method overriding the shape's
            </summary>
            <param name="g"></param>
        </member>
        <member name="T:ASE_Comp1.Shape">
            <summary>
            creating class shape with the base class interfaceshape
            </summary>
        </member>
        <member name="F:ASE_Comp1.Shape.fill_color">
            <summary>
            protecting the color to fill the shape
            </summary>
        </member>
        <member name="F:ASE_Comp1.Shape.pen_color">
            <summary>
            assigning the pen color
            </summary>
        </member>
        <member name="F:ASE_Comp1.Shape.x">
            <summary>
            protecting the x and y variable for axis
            </summary>
        </member>
        <member name="F:ASE_Comp1.Shape.y">
            <summary>
            protecting the x and y variable for axis
            </summary>
        </member>
        <member name="F:ASE_Comp1.Shape.flag_fill">
            <summary>
            variable to eaither fill or not fill the shape
            </summary>
        </member>
        <member name="M:ASE_Comp1.Shape.#ctor">
            <summary>
            shape constructor
            </summary>
        </member>
        <member name="M:ASE_Comp1.Shape.draw(System.Drawing.Graphics)">
            <summary>
            draw method
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:ASE_Comp1.Shape.Set_base(System.Drawing.Color,System.Drawing.Color,System.Boolean,System.Int32[])">
            <summary>
            creating method set_base 
            </summary>
            <param name="pen_color"></param>
            <param name="c"></param>
            <param name="flag_fill"></param>
            <param name="num"></param>
        </member>
        <member name="M:ASE_Comp1.Shape.set_properties(System.Drawing.Color,System.Drawing.Color,System.Boolean,System.Int32,System.Int32,System.Int32[])">
            <summary>
            creating set_properties method
            </summary>
            <param name="pen_color"></param>
            <param name="fill_color"></param>
            <param name="flag_fill"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="num"></param>
        </member>
        <member name="T:ASE_Comp1.SyntaxVal">
            <summary>
            class to check and validate the syntax 
            </summary>
        </member>
        <member name="M:ASE_Comp1.SyntaxVal.#ctor(System.Windows.Forms.RichTextBox)">
            <summary>
            adding keywords using constructor
            </summary> 
            <param name="richTbConsole"></param>
        </member>
        <member name="M:ASE_Comp1.SyntaxVal.checkCommand(System.String)">
            <summary>
            method to validate the syntax or command 
            </summary>
            <returns></returns>
        </member>
        <member name="T:ASE_Comp1.Triangle">
            <summary>
            new class rectangle is created from te base class shape
            </summary>
        </member>
        <member name="M:ASE_Comp1.Triangle.#ctor">
            <summary>
             calling  the base class constructor
            </summary>
        </member>
        <member name="M:ASE_Comp1.Triangle.draw(System.Drawing.Graphics)">
            <summary>
            overriding the draw method from shape
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:ASE_Comp1.Triangle.set_properties(System.Drawing.Color,System.Drawing.Color,System.Boolean,System.Int32,System.Int32,System.Int32[])">
            <summary>
            overriding the set_properties of shape and setting triangle's properties
            </summary>
            <param name="pen_color"></param>
            <param name="fill_color"></param>
            <param name="flag_fill"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="list"></param>
        </member>
        <member name="T:ASE_Comp1.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ASE_Comp1.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ASE_Comp1.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
    </members>
</doc>
